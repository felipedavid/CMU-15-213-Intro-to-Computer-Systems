3.1
%rax            0x100
0x104           0xAB
$0x108          0x108
(%rax)          0xFF
4(%rax)         0xAB
9(%rax,%rdx)    0x11
260(%rcx,%rdx)  0x13
0xFC(,%rcx,4)   0xFF
(%rax,%rdx,4)   0x11


3.2
movl %eax, (%rsp)
movw (%rax), %dx
movb $0xFF, %bl
movb (%rsp,%rdx,4), %dl
movq (%rdx), %rax
movw %dx, (%rax)


3.3
movb $0xF, (%ebx) // Can't reference memory using the lower 32 bit of a register
movl %rax, (%rsp) // instruction suffix and operand mismatch.
movw (%rax), 4(%rsp) // Can't reference the memory with the two operands
movb %al, %sl // Register %sl dosen't exist
movq %rax, $0x123 // Can't copy something into a immediate
movl %eax, %rdx // Operands size mismatch
movb %si, 8(%rbp) // Instruction suffix and operand mismatch


3.4
src_t               dest_t              Instruction
long                long                movq (%rdi), %rax
                                        movq %rax, (%rsi)

char                int                 movsbl (%rdi), %eax
                                        movl %eax, (%rsi)

char                unsigned            movsbl (%rdi), %eax
                                        movl %eax, (%rsi)

unsigned char       long                movzbl (%rdi), %eax
                                        movq %rax, (%rsi)

int                 char                movl (%rdi), %eax
                                        movb %al, (%rsi)

unsigned            unsigned char       movl (%rdi), %eax
                                        movb %al, (%rsi)

char                short               movsbw (%rdi), %ax
                                        movw %ax, (%rsi)


3.5:
void devocde1(long *xp, long *yp, long *zp) {
    long x = *xp;
    long y = *yp;
    long z = *zp;
    *yp = x;
    *zp = y;
    *xp = z;
}


3.6
leaq 6(%rax), %rdx          6+x
leaq (%rax,%rcx), %rdx      x+y
leaq (%rax,%rcx,4), %rdx    x+4y
leaq 7(%rax,%rax,8), %rdx   7+9x
leaq 0xA(,%rcx,4), %rdx     10+4y
leaq 9(%rax,%rcx,2), %rdx   9+x+2y


3.7
long scale2(long x, long y, long z) {
    long t = x*5 + y*2 + z*8;
    return t;
}


3.8
addq %rcx, (%rax)         0x100     0x100
subq %rdx, 8(%rax)        0x108     0xA8
imulq $16, (%rax,%rdx,8)  0x118     0x110
incq 16(%rax)             0x110     0x14
decq %rcx                 %rcx      0x0
subq %rdx, %rax           %rax      0xFD


3.9
movq %rdi, %rax
salq 4, %rax
movl %esi, %ecx
sarq %cl, %rax


3.10
long arith2(long x, long y, long z) {
    long t1 = x | y;
    long t2 = t1 >> 3;
    long t3 = ~t2;
    long t4 = z - t3;
    return t4;
}


3.11
A. Zeroes %rdx
B. movq $0, $rdx
C. 2 and 5


3.12
movq %rdx, %r8
movq %rdi, %rax
movl $0, %edx
divq %rsi
movq %rax, (%r8)
movq %rdx, (%rcx)
ret


3.13
A. int, <
B. short, >=
C. unsigned char, <=
D. long, unsigned long, !=


3.14
A. long, >=
B. short, unsigned short, ==
C. unsigned char, >
D. int, <=


3.15
A. 0x4003fe
B. 0x400425
C. 0x400543 0x400545
D. 0x400560


3.16
A.
void cond(long a, long *p) {
    if (p == 0) goto end;
    if (a <= *p) goto end;
    *p = a;
end:
    return;
}

B. Because we can't check two statements at the same time in assembly. We have
to check each one at a time.


3.17
A.
long absdiff_se(long x, long y) {
    if (x < y) goto True;
False:
    ge_cnt++;
    result = x - y;
    return result;
True:
    lt_cnt++;
    result = y - x;
    return result;
}

B. This method is more intuitive.

